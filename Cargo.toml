[package]
name = "Cargo.toml file of our favorite crates"
version = "1.1.0"
authors = ["Joel Parker Henderson <joel@sixarm.com>"]
edition = "2019"

[dependencies]

##
#
# Command line favorites
#
##

# handlr: A better xdg-utils 
handlr = "*"

## Misc to be annotated

ansi_colours = "*"
atty = "*"
autocfg = "*"
backtrace = "*"
bincode = "*"
bstr = "*"
byteorder = "*"
bytesize = "*"
cargo = "*"
cargo-do = "*"
cargo-tree = "*"
cargo-watch = "*"
clap = "*"
clicolors-control = "*"
commoncrypto = "*"
commoncrypto-sys = "*"
console = "*"
content_inspector = "*"
core-foundation-sys = "*"
curl = "*"
darling = "*"
derive_builder = "*"
diesel_cli = "*"
directories = "*"
dirs = "*"
error-chain = "*"
filetime = "*"
fixedbitset = "*"
fnv = "*"
fsevent = "*"
git2 = "*"
glob = "*"
globset = "*"
heck = "*"
home = "*"
humantime = "*"
ident_case = "*"
ignore = "*"
libnghttp2-sys = "*"
libssh2-sys = "*"
libz-sys = "*"
line-wrap = "*"
log = "*"
notify = "*"
onig = "*"
onig_sys = "*"
opener = "*"
openssl-sys = "*"
ordermap = "*"
parking_lot = "*"
petgraph = "*"
plist = "*"
prettyprint = "*"
regex = "*"
rustc-demangle = "*"
rustfix = "*"
same-file = "*"
scopeguard = "*"
serde = "*"
shell-words = "*"
sized-chunks = "*"
smallvec = "*"
strsim = "*"
structopt = "*"
syn = "*"
syntect = "*"
tar = "*"
termcolor = "*"
termios = "*"
textwrap = "*"
toml = "*"
typenum = "*"
unicode-segmentation = "*"
void = "*"
walkdir = "*"
watchexec = "*"
what = "*"
xml-rs = "*"
yaml-rust = "*"

##
#
# Application favorites
#
##

dotenv = "0.9.0"

chrono = { version = "0.4", features = ["serde"] }

# Clap: Command Line Argument Parser for Rust https://clap.rs
clap = {version = "2.33", features = ["yaml"]}

# Diesel: A safe, extensible ORM and Query Builder for Rust.
#
#   * chrono: for time data types
#   * network-address: for IP address data types
#   * numeric: for numeric data types, such as decimals
#   * postgres: for PostgreSQL databases
#   * sqlite: for SQLite databases
#   * r2d2: for Rust connection pooling optimizations
#   * serde_json: for JSON data types
#   * uuid: for UUID data types
diesel = { version = "1.4.2", features = ["128-column-tables", "chrono", "network-address", "numeric", "postgres", "sqlite", "r2d2", "serde_json", "uuid", "url"] }

# Version must match the diesel dependency version.
# Features must include serde, to be able to handle bigdecimal.
bigdecimal = { version = "= 0.0.14", features = ["serde"] }

# Version must match the diesel dependency version
r2d2 = "= 0.8.4"

# uuid: Generate and parse UUIDs.
#
# Version must match the diesel dependency version
#
#   * v1 - adds the Uuid::new_v1 function and the ability to create a V1 using an implementation of uuid::v1::ClockSequence (usually uuid::v1::Context) and a timestamp from time::timespec.
#   * v3 - adds the Uuid::new_v3 function and the ability to create a V3 UUID based on the MD5 hash of some data.
#   * v4 - adds the Uuid::new_v4 function and the ability to randomly generate a Uuid.
#   * v5 - adds the Uuid::new_v5 function and the ability to create a V5 UUID based on the SHA1 hash of some data.
#   * serde - adds the ability to serialize and deserialize a Uuid using the serde crate.
#
# You need to enable one of the following Cargo features together with v3, v4 or v5 feature if you're targeting wasm32 architecture:
#
#   * stdweb - enables support for OsRng on wasm32-unknown-unknown via stdweb combined with cargo-web
#   * wasm-bindgen - wasm-bindgen enables support for OsRng on wasm32-unknown-unknown via wasm-bindgen
#
uuid = { version = "= 0.6.5", features = ["serde", "v1", "v3", "v4", "v5"] }

# Serde: a framework for serializing and deserializing Rust data structures.
# The Serde crate has core APIs, including Serialize and Deserialize traits.
# Always required for Serde. The "derive" feature is only required when
# using #[derive(Serialize, Deserialize)] to make Serde work with structs
# and enums defined in your crate.
serde = { version = "1.0.91", features = ["derive"] }

# Version must match the serde dependency version
serde_derive = "1.0.91"

# Each data format lives in its own crate; the sample code below uses JSON.
serde_json = { version = "1.0.39", features = ["arbitrary_precision"] }

# Rand: A Rust library for random number generation.
rand = "0.6.5"

# rust-argon2: Rust library for hashing passwords using Argon2 password-hashing function.
#
# For algorithm, we prefer Argon2 (preferrably Argon2id) over Bcrypt, Scrypt, PBKDF2.
#
# For Argon2 implementation, we prefer the crate rust-argon2 over:
#
#   * argonautica: more idiomatic, and faster, but wraps C, and needs a C compiler.
#   * argon2rs: more popular, but not updated recently, and lacks Argon2id.
#
rust-argon2 = "0.4.0"
